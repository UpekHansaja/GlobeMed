package lk.jiat.globemed.ui;

import lk.jiat.globemed.builder.AppointmentBuilder;
import lk.jiat.globemed.builder.AppointmentDirector;
import lk.jiat.globemed.model.*;
import lk.jiat.globemed.service.notification.*;
import lk.jiat.globemed.service.approval.*;
import lk.jiat.globemed.service.TimeSlotFactory;
import lk.jiat.globemed.service.PatternDemoService;
import lk.jiat.globemed.antipattern.GodObjectExample;
import lk.jiat.globemed.antipattern.SpaghettiCodeExample;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import javax.swing.JOptionPane;

/**
 * NetBeans-compatible form demonstrating advanced design patterns
 * @author upekhansaja
 */
public class PatternDemoForm extends javax.swing.JFrame {
    
    // Sample data for demonstrations
    private Hospital globalHospital;
    private Patient samplePatient;
    private Staff sampleDoctor;
    private Staff sampleNurse;
    private Staff sampleAdmin;
    private PatternDemoService patternDemoService;
    private ApprovalHandler approvalChain;
    
    public PatternDemoForm() {
        initComponents();
        initializeSampleData();
        initializePatternServices();
        setLocationRelativeTo(null);
    }
    
    private void initializeSampleData() {
        // Create sample patient
        samplePatient = new Patient();
        samplePatient.setId(1L);
        samplePatient.setFirstName("John");
        samplePatient.setLastName("Doe");
        samplePatient.setDob(LocalDate.of(1985, 5, 15));
        samplePatient.setGender("Male");
        samplePatient.setContactNumber("555-1234");
        samplePatient.setAddress("123 Main St");
        
        // Create sample roles
        Role doctorRole = new Role();
        doctorRole.setId(1L);
        doctorRole.setName("Doctor");
        
        Role nurseRole = new Role();
        nurseRole.setId(2L);
        nurseRole.setName("Nurse");
        
        Role adminRole = new Role();
        adminRole.setId(3L);
        adminRole.setName("Administrator");
        
        // Create sample staff
        sampleDoctor = new Staff();
        sampleDoctor.setId(1L);
        sampleDoctor.setName("Dr. Smith");
        sampleDoctor.setEmail("dr.smith@globemed.lk");
        sampleDoctor.setRole(doctorRole);
        
        sampleNurse = new Staff();
        sampleNurse.setId(2L);
        sampleNurse.setName("Nurse Johnson");
        sampleNurse.setEmail("nurse.johnson@globemed.lk");
        sampleNurse.setRole(nurseRole);
        
        sampleAdmin = new Staff();
        sampleAdmin.setId(3L);
        sampleAdmin.setName("Admin Wilson");
        sampleAdmin.setEmail("admin.wilson@globemed.lk");
        sampleAdmin.setRole(adminRole);
    }
    
    private void initializePatternServices() {
        // Initialize comprehensive pattern demo service
        patternDemoService = new PatternDemoService();
        
        // Initialize approval chain
        approvalChain = ApprovalChainBuilder.createStandardChain();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        compositePanel = new javax.swing.JPanel();
        btnCreateHospital = new javax.swing.JButton();
        btnAddDepartment = new javax.swing.JButton();
        btnDisplayHierarchy = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCompositeOutput = new javax.swing.JTextArea();
        bridgePanel = new javax.swing.JPanel();
        btnSendEmail = new javax.swing.JButton();
        btnSendSMS = new javax.swing.JButton();
        btnTestNotifications = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtBridgeOutput = new javax.swing.JTextArea();
        builderPanel = new javax.swing.JPanel();
        btnCreateEmergency = new javax.swing.JButton();
        btnCreateRoutine = new javax.swing.JButton();
        btnCreateCustom = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtBuilderOutput = new javax.swing.JTextArea();
        chainPanel = new javax.swing.JPanel();
        btnLowCostApproval = new javax.swing.JButton();
        btnMediumCostApproval = new javax.swing.JButton();
        btnHighCostApproval = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtChainOutput = new javax.swing.JTextArea();
        flyweightPanel = new javax.swing.JPanel();
        btnCreateTimeSlots = new javax.swing.JButton();
        btnScheduleAppointments = new javax.swing.JButton();
        btnShowStatistics = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtFlyweightOutput = new javax.swing.JTextArea();
        allPatternsPanel = new javax.swing.JPanel();
        btnRunComprehensiveDemo = new javax.swing.JButton();
        btnShowAntiPatterns = new javax.swing.JButton();
        btnClearOutput = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtAllPatternsOutput = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Design Patterns Demo - GlobeMed");

        btnCreateHospital.setText("Create Hospital");
        btnCreateHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateHospitalActionPerformed(evt);
            }
        });

        btnAddDepartment.setText("Add Department");
        btnAddDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDepartmentActionPerformed(evt);
            }
        });

        btnDisplayHierarchy.setText("Display Hierarchy");
        btnDisplayHierarchy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayHierarchyActionPerformed(evt);
            }
        });

        txtCompositeOutput.setColumns(20);
        txtCompositeOutput.setRows(5);
        jScrollPane1.setViewportView(txtCompositeOutput);

        javax.swing.GroupLayout compositePanelLayout = new javax.swing.GroupLayout(compositePanel);
        compositePanel.setLayout(compositePanelLayout);
        compositePanelLayout.setHorizontalGroup(
            compositePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compositePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(compositePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(compositePanelLayout.createSequentialGroup()
                        .addComponent(btnCreateHospital)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddDepartment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDisplayHierarchy)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        compositePanelLayout.setVerticalGroup(
            compositePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(compositePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(compositePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateHospital)
                    .addComponent(btnAddDepartment)
                    .addComponent(btnDisplayHierarchy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Composite Pattern", compositePanel);

        btnSendEmail.setText("Send Email");
        btnSendEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendEmailActionPerformed(evt);
            }
        });

        btnSendSMS.setText("Send SMS");
        btnSendSMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendSMSActionPerformed(evt);
            }
        });

        btnTestNotifications.setText("Test All Notifications");
        btnTestNotifications.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestNotificationsActionPerformed(evt);
            }
        });

        txtBridgeOutput.setColumns(20);
        txtBridgeOutput.setRows(5);
        jScrollPane2.setViewportView(txtBridgeOutput);

        javax.swing.GroupLayout bridgePanelLayout = new javax.swing.GroupLayout(bridgePanel);
        bridgePanel.setLayout(bridgePanelLayout);
        bridgePanelLayout.setHorizontalGroup(
            bridgePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bridgePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bridgePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(bridgePanelLayout.createSequentialGroup()
                        .addComponent(btnSendEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSendSMS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTestNotifications)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        bridgePanelLayout.setVerticalGroup(
            bridgePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bridgePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bridgePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSendEmail)
                    .addComponent(btnSendSMS)
                    .addComponent(btnTestNotifications))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Bridge Pattern", bridgePanel);

        btnCreateEmergency.setText("Create Emergency");
        btnCreateEmergency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEmergencyActionPerformed(evt);
            }
        });

        btnCreateRoutine.setText("Create Routine");
        btnCreateRoutine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRoutineActionPerformed(evt);
            }
        });

        btnCreateCustom.setText("Create Custom");
        btnCreateCustom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCustomActionPerformed(evt);
            }
        });

        txtBuilderOutput.setColumns(20);
        txtBuilderOutput.setRows(5);
        jScrollPane3.setViewportView(txtBuilderOutput);

        javax.swing.GroupLayout builderPanelLayout = new javax.swing.GroupLayout(builderPanel);
        builderPanel.setLayout(builderPanelLayout);
        builderPanelLayout.setHorizontalGroup(
            builderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(builderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(builderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(builderPanelLayout.createSequentialGroup()
                        .addComponent(btnCreateEmergency)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateRoutine)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateCustom)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        builderPanelLayout.setVerticalGroup(
            builderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(builderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(builderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateEmergency)
                    .addComponent(btnCreateRoutine)
                    .addComponent(btnCreateCustom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Builder Pattern", builderPanel);

        btnLowCostApproval.setText("Low Cost ($75)");
        btnLowCostApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLowCostApprovalActionPerformed(evt);
            }
        });

        btnMediumCostApproval.setText("Medium Cost ($2500)");
        btnMediumCostApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMediumCostApprovalActionPerformed(evt);
            }
        });

        btnHighCostApproval.setText("High Cost ($15000)");
        btnHighCostApproval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHighCostApprovalActionPerformed(evt);
            }
        });

        txtChainOutput.setColumns(20);
        txtChainOutput.setRows(5);
        jScrollPane4.setViewportView(txtChainOutput);

        javax.swing.GroupLayout chainPanelLayout = new javax.swing.GroupLayout(chainPanel);
        chainPanel.setLayout(chainPanelLayout);
        chainPanelLayout.setHorizontalGroup(
            chainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(chainPanelLayout.createSequentialGroup()
                        .addComponent(btnLowCostApproval)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMediumCostApproval)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHighCostApproval)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        chainPanelLayout.setVerticalGroup(
            chainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLowCostApproval)
                    .addComponent(btnMediumCostApproval)
                    .addComponent(btnHighCostApproval))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Chain of Responsibility", chainPanel);

        btnCreateTimeSlots.setText("Create Time Slots");
        btnCreateTimeSlots.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTimeSlotsActionPerformed(evt);
            }
        });

        btnScheduleAppointments.setText("Schedule Appointments");
        btnScheduleAppointments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleAppointmentsActionPerformed(evt);
            }
        });

        btnShowStatistics.setText("Show Statistics");
        btnShowStatistics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowStatisticsActionPerformed(evt);
            }
        });

        txtFlyweightOutput.setColumns(20);
        txtFlyweightOutput.setRows(5);
        jScrollPane5.setViewportView(txtFlyweightOutput);

        javax.swing.GroupLayout flyweightPanelLayout = new javax.swing.GroupLayout(flyweightPanel);
        flyweightPanel.setLayout(flyweightPanelLayout);
        flyweightPanelLayout.setHorizontalGroup(
            flyweightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flyweightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(flyweightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(flyweightPanelLayout.createSequentialGroup()
                        .addComponent(btnCreateTimeSlots)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnScheduleAppointments)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowStatistics)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        flyweightPanelLayout.setVerticalGroup(
            flyweightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flyweightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(flyweightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateTimeSlots)
                    .addComponent(btnScheduleAppointments)
                    .addComponent(btnShowStatistics))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Flyweight Pattern", flyweightPanel);

        btnRunComprehensiveDemo.setText("Run Comprehensive Demo");
        btnRunComprehensiveDemo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunComprehensiveDemoActionPerformed(evt);
            }
        });

        btnShowAntiPatterns.setText("Show Anti-Patterns");
        btnShowAntiPatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAntiPatternsActionPerformed(evt);
            }
        });

        btnClearOutput.setText("Clear Output");
        btnClearOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOutputActionPerformed(evt);
            }
        });

        txtAllPatternsOutput.setColumns(20);
        txtAllPatternsOutput.setRows(5);
        jScrollPane6.setViewportView(txtAllPatternsOutput);

        javax.swing.GroupLayout allPatternsPanelLayout = new javax.swing.GroupLayout(allPatternsPanel);
        allPatternsPanel.setLayout(allPatternsPanelLayout);
        allPatternsPanelLayout.setHorizontalGroup(
            allPatternsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allPatternsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(allPatternsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(allPatternsPanelLayout.createSequentialGroup()
                        .addComponent(btnRunComprehensiveDemo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowAntiPatterns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearOutput)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        allPatternsPanelLayout.setVerticalGroup(
            allPatternsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allPatternsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(allPatternsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRunComprehensiveDemo)
                    .addComponent(btnShowAntiPatterns)
                    .addComponent(btnClearOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("All Patterns Demo", allPatternsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>                        

    private void btnCreateHospitalActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // Composite Pattern Demo
        String output = captureOutput(() -> {
            System.out.println("=== COMPOSITE PATTERN DEMO ===");
            System.out.println("Creating hospital hierarchy...\n");
            
            // Create main hospital
            globalHospital = new Hospital("GlobeMed Central Hospital", 
                                        "Main hospital facility", 
                                        "GMC001", 
                                        "123 Medical Center Drive");
            
            // Create departments
            Department cardiology = new Department("Cardiology", 
                                                 "Heart and cardiovascular care", 
                                                 "CARD", 50000.0);
            cardiology.addStaff(sampleDoctor);
            cardiology.addStaff(sampleNurse);
            
            Department emergency = new Department("Emergency", 
                                                "Emergency medical services", 
                                                "EMER", 75000.0);
            emergency.addStaff(sampleDoctor);
            emergency.addStaff(sampleNurse);
            emergency.addStaff(sampleAdmin);
            
            // Add departments to hospital
            globalHospital.add(cardiology);
            globalHospital.add(emergency);
            
            System.out.println("✅ Hospital created successfully!");
            System.out.println("Hospital: " + globalHospital.getName());
            System.out.println("Total Budget: $" + globalHospital.getTotalBudget());
            System.out.println("Total Staff: " + globalHospital.getStaffCount());
        });
        
        txtCompositeOutput.setText(output);
    }                                                 

    private void btnAddDepartmentActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if (globalHospital == null) {
            JOptionPane.showMessageDialog(this, "Please create a hospital first!");
            return;
        }
        
        String output = captureOutput(() -> {
            System.out.println("=== ADDING NEW DEPARTMENT ===");
            
            // Create a new department
            Department pediatrics = new Department("Pediatrics", 
                                                 "Children's medical care", 
                                                 "PEDI", 40000.0);
            pediatrics.addStaff(sampleDoctor);
            
            // Add to hospital
            globalHospital.add(pediatrics);
            
            System.out.println("✅ Pediatrics department added!");
            System.out.println("Updated Total Budget: $" + globalHospital.getTotalBudget());
            System.out.println("Updated Total Staff: " + globalHospital.getStaffCount());
        });
        
        txtCompositeOutput.append("\n" + output);
    }                                                

    private void btnDisplayHierarchyActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        if (globalHospital == null) {
            JOptionPane.showMessageDialog(this, "Please create a hospital first!");
            return;
        }
        
        String output = captureOutput(() -> {
            System.out.println("\n=== HOSPITAL HIERARCHY ===");
            globalHospital.displayInfo();
        });
        
        txtCompositeOutput.append("\n" + output);
    }                                                   

    private void btnSendEmailActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // Bridge Pattern Demo - Email
        String output = captureOutput(() -> {
            System.out.println("=== BRIDGE PATTERN DEMO - EMAIL ===");
            
            // Create email sender (implementor)
            EmailSender emailSender = new EmailSender("smtp.globemed.lk", 587, 
                                                     "system@globemed.lk", "password123");
            
            // Create sample appointment
            Appointment appointment = new Appointment();
            appointment.setId(1L);
            appointment.setPatient(samplePatient);
            appointment.setDoctor(sampleDoctor);
            appointment.setAppointmentDateTime(LocalDateTime.now().plusDays(1));
            appointment.setStatus("Scheduled");
            
            // Create appointment notification (abstraction)
            AppointmentNotification notification = new AppointmentNotification(
                emailSender, appointment, "SCHEDULED");
            
            // Send notification
            notification.notify(samplePatient.getFirstName() + "@email.com");
            
            System.out.println("\n✅ Email notification sent successfully!");
        });
        
        txtBridgeOutput.setText(output);
    }                                            

    private void btnSendSMSActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // Bridge Pattern Demo - SMS
        String output = captureOutput(() -> {
            System.out.println("=== BRIDGE PATTERN DEMO - SMS ===");
            
            // Create SMS sender (implementor)
            SMSSender smsSender = new SMSSender("api_key_123", 
                                              "https://api.sms.lk/send", 
                                              "+94771234567");
            
            // Create sample billing record
            BillingRecord billing = new BillingRecord();
            billing.setId(1L);
            billing.setPatient(samplePatient);
            billing.setAmount(150.00);
            billing.setPaymentMethod("Cash");
            billing.setStatus("Pending");
            billing.setCreatedAt(LocalDateTime.now());
            
            // Create billing notification (abstraction)
            BillingNotification notification = new BillingNotification(
                smsSender, billing, "GENERATED");
            
            // Send notification
            notification.notify("+94771234567");
            
            System.out.println("\n✅ SMS notification sent successfully!");
        });
        
        txtBridgeOutput.append("\n" + output);
    }                                          

    private void btnTestNotificationsActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // Bridge Pattern Demo - Multiple notifications
        String output = captureOutput(() -> {
            System.out.println("=== TESTING ALL NOTIFICATION TYPES ===");
            
            // Create both senders
            EmailSender emailSender = new EmailSender("smtp.globemed.lk", 587, 
                                                     "system@globemed.lk", "password123");
            SMSSender smsSender = new SMSSender("api_key_123", 
                                              "https://api.sms.lk/send", 
                                              "+94771234567");
            
            // Create sample data
            Appointment appointment = new Appointment();
            appointment.setId(2L);
            appointment.setPatient(samplePatient);
            appointment.setDoctor(sampleDoctor);
            appointment.setAppointmentDateTime(LocalDateTime.now().plusHours(2));
            appointment.setStatus("URGENT");
            
            // Test different notification types with different senders
            System.out.println("\n1. Urgent Appointment via Email:");
            AppointmentNotification emailNotif = new AppointmentNotification(
                emailSender, appointment, "SCHEDULED");
            emailNotif.setPriority("URGENT");
            emailNotif.notify("patient@email.com");
            
            System.out.println("\n2. Urgent Appointment via SMS:");
            AppointmentNotification smsNotif = new AppointmentNotification(
                smsSender, appointment, "SCHEDULED");
            smsNotif.setPriority("URGENT");
            smsNotif.notify("+94771234567");
            
            System.out.println("\n✅ All notifications tested successfully!");
            System.out.println("Bridge Pattern allows same notification logic with different senders!");
        });
        
        txtBridgeOutput.append("\n" + output);
    }                                                    

    private void btnCreateEmergencyActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // Builder Pattern Demo - Emergency Appointment
        String output = captureOutput(() -> {
            System.out.println("=== BUILDER PATTERN DEMO - EMERGENCY ===");
            
            AppointmentDirector director = new AppointmentDirector();
            
            try {
                // Create emergency appointment using director
                Appointment emergency = director.createEmergencyAppointment(samplePatient, sampleDoctor);
                
                System.out.println("✅ Emergency appointment created:");
                System.out.println("Patient: " + emergency.getPatient().getFullName());
                System.out.println("Doctor: " + emergency.getDoctor().getName());
                System.out.println("Date/Time: " + emergency.getAppointmentDateTime());
                System.out.println("Status: " + emergency.getStatus());
                System.out.println("Type: Emergency (immediate scheduling)");
                
            } catch (Exception e) {
                System.err.println("❌ Error creating emergency appointment: " + e.getMessage());
            }
        });
        
        txtBuilderOutput.setText(output);
    }                                                  

    private void btnCreateRoutineActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // Builder Pattern Demo - Routine Appointment
        String output = captureOutput(() -> {
            System.out.println("=== BUILDER PATTERN DEMO - ROUTINE ===");
            
            AppointmentDirector director = new AppointmentDirector();
            LocalDateTime futureDate = LocalDateTime.now().plusDays(7).withHour(10).withMinute(0);
            
            try {
                // Create routine appointment using director
                Appointment routine = director.createRoutineAppointment(samplePatient, sampleDoctor, futureDate);
                
                System.out.println("✅ Routine appointment created:");
                System.out.println("Patient: " + routine.getPatient().getFullName());
                System.out.println("Doctor: " + routine.getDoctor().getName());
                System.out.println("Date/Time: " + routine.getAppointmentDateTime());
                System.out.println("Status: " + routine.getStatus());
                System.out.println("Type: Routine checkup");
                
            } catch (Exception e) {
                System.err.println("❌ Error creating routine appointment: " + e.getMessage());
            }
        });
        
        txtBuilderOutput.append("\n" + output);
    }                                                

    private void btnCreateCustomActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // Builder Pattern Demo - Custom Appointment using Builder directly
        String output = captureOutput(() -> {
            System.out.println("=== BUILDER PATTERN DEMO - CUSTOM ===");
            
            try {
                // Create custom appointment using builder directly
                AppointmentBuilder builder = new AppointmentBuilder();
                
                Appointment custom = builder
                    .withPatient(samplePatient)
                    .withDoctor(sampleDoctor)
                    .withDateTime(LocalDateTime.now().plusDays(3).withHour(14).withMinute(30))
                    .withStatus("Follow-up")
                    .build();
                
                System.out.println("✅ Custom appointment created:");
                System.out.println("Patient: " + custom.getPatient().getFullName());
                System.out.println("Doctor: " + custom.getDoctor().getName());
                System.out.println("Date/Time: " + custom.getAppointmentDateTime());
                System.out.println("Status: " + custom.getStatus());
                System.out.println("Type: Custom follow-up appointment");
                
                // Demonstrate builder validation
                System.out.println("\n--- Testing Builder Validation ---");
                try {
                    builder.reset()
                          .withPatient(samplePatient)
                          .withDateTime(LocalDateTime.now().minusDays(1)) // Past date
                          .build();
                } catch (Exception e) {
                    System.out.println("✅ Validation working: " + e.getMessage());
                }
                
            } catch (Exception e) {
                System.err.println("❌ Error creating custom appointment: " + e.getMessage());
            }
        });
        
        txtBuilderOutput.append("\n" + output);
    }                                               

    private void btnLowCostApprovalActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // Chain of Responsibility Demo - Low Cost
        String output = captureOutput(() -> {
            System.out.println("=== CHAIN OF RESPONSIBILITY - LOW COST ===");
            
            ApprovalRequest request = new ApprovalRequest(
                "APPOINTMENT", 75.0, "nurse@globemed.lk", 
                "Routine checkup appointment", samplePatient);
            
            approvalChain.handleRequest(request);
            
            System.out.println("\n✅ Low cost approval process completed!");
            System.out.println("Final status: " + (request.isApproved() ? "APPROVED" : "REJECTED"));
            if (request.isApproved()) {
                System.out.println("Approved by: " + request.getApprovedBy());
            }
        });
        
        txtChainOutput.setText(output);
    }                                                  

    private void btnMediumCostApprovalActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // Chain of Responsibility Demo - Medium Cost
        String output = captureOutput(() -> {
            System.out.println("=== CHAIN OF RESPONSIBILITY - MEDIUM COST ===");
            
            ApprovalRequest request = new ApprovalRequest(
                "SURGERY", 2500.0, "doctor@globemed.lk", 
                "Minor surgical procedure", samplePatient);
            
            approvalChain.handleRequest(request);
            
            System.out.println("\n✅ Medium cost approval process completed!");
            System.out.println("Final status: " + (request.isApproved() ? "APPROVED" : "REJECTED"));
            if (request.isApproved()) {
                System.out.println("Approved by: " + request.getApprovedBy());
            }
        });
        
        txtChainOutput.append("\n" + output);
    }                                                     

    private void btnHighCostApprovalActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // Chain of Responsibility Demo - High Cost
        String output = captureOutput(() -> {
            System.out.println("=== CHAIN OF RESPONSIBILITY - HIGH COST ===");
            
            ApprovalRequest request = new ApprovalRequest(
                "SURGERY", 15000.0, "admin@globemed.lk", 
                "Major surgical procedure requiring admin approval", samplePatient);
            
            approvalChain.handleRequest(request);
            
            System.out.println("\n✅ High cost approval process completed!");
            System.out.println("Final status: " + (request.isApproved() ? "APPROVED" : "REJECTED"));
            if (request.isApproved()) {
                System.out.println("Approved by: " + request.getApprovedBy());
            }
        });
        
        txtChainOutput.append("\n" + output);
    }                                                   

    private void btnCreateTimeSlotsActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // Flyweight Pattern Demo - Create Time Slots
        String output = captureOutput(() -> {
            System.out.println("=== FLYWEIGHT PATTERN - TIME SLOTS ===");
            
            // Clear existing slots for demo
            TimeSlotFactory.clearAll();
            
            // Initialize standard slots
            TimeSlotFactory.initializeStandardSlots();
            
            System.out.println("\n✅ Time slots created successfully!");
        });
        
        txtFlyweightOutput.setText(output);
    }                                                  

    private void btnScheduleAppointmentsActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // Flyweight Pattern Demo - Schedule Appointments
        String output = captureOutput(() -> {
            System.out.println("=== FLYWEIGHT PATTERN - SCHEDULING ===");
            
            // Request multiple time slots (demonstrating flyweight reuse)
            TimeSlot morning1 = TimeSlotFactory.getConsultationSlot("09:00", 30);
            TimeSlot morning2 = TimeSlotFactory.getConsultationSlot("09:00", 30); // Same flyweight
            TimeSlot afternoon = TimeSlotFactory.getConsultationSlot("14:00", 30);
            TimeSlot surgery = TimeSlotFactory.getSurgerySlot("10:00", 120);
            
            // Use flyweights with different extrinsic state
            morning1.scheduleAppointment("Dr. Smith", "John Doe", LocalDate.now(), "Scheduled");
            morning2.scheduleAppointment("Dr. Johnson", "Jane Smith", LocalDate.now().plusDays(1), "Confirmed");
            afternoon.scheduleAppointment("Dr. Wilson", "Bob Brown", LocalDate.now().plusDays(2), "Scheduled");
            surgery.scheduleAppointment("Dr. Martinez", "Alice Johnson", LocalDate.now().plusDays(3), "Scheduled");
            
            System.out.println("\n✅ Appointments scheduled using flyweight time slots!");
        });
        
        txtFlyweightOutput.append("\n" + output);
    }                                                       

    private void btnShowStatisticsActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // Flyweight Pattern Demo - Show Statistics
        String output = captureOutput(() -> {
            System.out.println("=== FLYWEIGHT PATTERN - STATISTICS ===");
            
            TimeSlotFactory.printStatistics();
            
            System.out.println("Memory efficiency demonstration:");
            System.out.println("- Same time slots are reused across multiple appointments");
            System.out.println("- Only unique combinations of time, duration, and type are stored");
            System.out.println("- Extrinsic state (doctor, patient, date) is passed as parameters");
        });
        
        txtFlyweightOutput.append("\n" + output);
    }                                                 

    private void btnRunComprehensiveDemoActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // Run comprehensive demo showing all patterns working together
        String output = captureOutput(() -> {
            patternDemoService.runComprehensiveDemo();
        });
        
        txtAllPatternsOutput.setText(output);
    }                                                       

    private void btnShowAntiPatternsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        // Anti-Pattern Demo
        String output = captureOutput(() -> {
            System.out.println("=== ANTI-PATTERNS DEMONSTRATION ===");
            System.out.println("Showing examples of BAD design patterns to avoid:\n");
            
            // God Object Anti-Pattern
            System.out.println("1. GOD OBJECT ANTI-PATTERN:");
            System.out.println("   - Single class trying to do everything");
            System.out.println("   - Violates Single Responsibility Principle");
            System.out.println("   - Hard to maintain and test");
            System.out.println("   - See: GodObjectExample.java\n");
            
            // Spaghetti Code Anti-Pattern
            System.out.println("2. SPAGHETTI CODE ANTI-PATTERN:");
            System.out.println("   - Deeply nested if-else statements");
            System.out.println("   - Complex control flow");
            System.out.println("   - Hard to understand and modify");
            System.out.println("   - See: SpaghettiCodeExample.java\n");
            
            // Demonstrate spaghetti code
            SpaghettiCodeExample spaghettiExample = new SpaghettiCodeExample();
            Appointment testAppointment = new Appointment();
            testAppointment.setPatient(samplePatient);
            testAppointment.setDoctor(sampleDoctor);
            testAppointment.setAppointmentDateTime(LocalDateTime.now().plusDays(1));
            testAppointment.setStatus("Scheduled");
            
            System.out.println("SPAGHETTI CODE RESULT:");
            String badResult = spaghettiExample.processAppointmentBadWay(testAppointment);
            System.out.println("Bad way: " + badResult);
            
            System.out.println("\nREFACTORED CODE RESULT:");
            String goodResult = spaghettiExample.processAppointmentGoodWay(testAppointment);
            System.out.println("Good way: " + goodResult);
            
            System.out.println("\n✅ Anti-patterns demonstration completed!");
            System.out.println("Remember: These are examples of what NOT to do!");
        });
        
        txtAllPatternsOutput.append("\n" + output);
    }                                                   

    private void btnClearOutputActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // Clear all output areas
        txtCompositeOutput.setText("");
        txtBridgeOutput.setText("");
        txtBuilderOutput.setText("");
        txtChainOutput.setText("");
        txtFlyweightOutput.setText("");
        txtAllPatternsOutput.setText("");
        
        JOptionPane.showMessageDialog(this, "All output areas cleared!", "Clear Output", JOptionPane.INFORMATION_MESSAGE);
    }                                             

    /**
     * Utility method to capture System.out output
     */
    private String captureOutput(Runnable action) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        
        try {
            System.setOut(new PrintStream(baos));
            action.run();
            return baos.toString();
        } finally {
            System.setOut(originalOut);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatternDemoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatternDemoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatternDemoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatternDemoForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatternDemoForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel allPatternsPanel;
    private javax.swing.JPanel bridgePanel;
    private javax.swing.JPanel builderPanel;
    private javax.swing.JButton btnAddDepartment;
    private javax.swing.JButton btnClearOutput;
    private javax.swing.JButton btnCreateCustom;
    private javax.swing.JButton btnCreateEmergency;
    private javax.swing.JButton btnCreateHospital;
    private javax.swing.JButton btnCreateRoutine;
    private javax.swing.JButton btnCreateTimeSlots;
    private javax.swing.JButton btnDisplayHierarchy;
    private javax.swing.JButton btnHighCostApproval;
    private javax.swing.JButton btnLowCostApproval;
    private javax.swing.JButton btnMediumCostApproval;
    private javax.swing.JButton btnRunComprehensiveDemo;
    private javax.swing.JButton btnScheduleAppointments;
    private javax.swing.JButton btnSendEmail;
    private javax.swing.JButton btnSendSMS;
    private javax.swing.JButton btnShowAntiPatterns;
    private javax.swing.JButton btnShowStatistics;
    private javax.swing.JButton btnTestNotifications;
    private javax.swing.JPanel chainPanel;
    private javax.swing.JPanel compositePanel;
    private javax.swing.JPanel flyweightPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea txtAllPatternsOutput;
    private javax.swing.JTextArea txtBridgeOutput;
    private javax.swing.JTextArea txtBuilderOutput;
    private javax.swing.JTextArea txtChainOutput;
    private javax.swing.JTextArea txtCompositeOutput;
    private javax.swing.JTextArea txtFlyweightOutput;
    // End of variables declaration                   
}